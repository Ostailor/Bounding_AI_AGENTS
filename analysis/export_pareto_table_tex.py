#!/usr/bin/env python3
from __future__ import annotations

import argparse
import csv
import os
from typing import Any, Dict, List


def load_rows(csv_path: str) -> List[Dict[str, Any]]:
    rows: List[Dict[str, Any]] = []
    with open(csv_path, "r") as f:
        r = csv.DictReader(f)
        for row in r:
            rows.append(row)
    return rows


def fmt(x: Any, nd: int = 3) -> str:
    try:
        v = float(x)
        return f"{v:.{nd}f}"
    except Exception:
        return str(x)


def make_table(rows: List[Dict[str, Any]], max_rows: int) -> str:
    header = (
        "% Auto-generated by analysis/export_pareto_table_tex.py\n"
        "% Edit caption/label as needed.\n"
        "\\begin{table}[t]\n"
        "\\centering\n\\small\n"
        "\\begin{tabular}{rrrrrr}\n\\hline\n"
        "Cap & Refill & Share & Profit (mean) & Vol (mean) & Spread (mean) \\\\ \\hline\n"
    )
    lines: List[str] = [header]
    count = 0
    for row in rows:
        cap = row.get("capacity_tokens", "")
        ref = row.get("refill_tokens", "")
        share = row.get("optimizer_share", "")
        pnl = row.get("mean_agent_pnl_mean", "")
        vol = row.get("realized_vol_mean", "")
        spr = row.get("mean_spread_mean", "")
        lines.append(
            f"{fmt(cap,0)} & {fmt(ref,0)} & {fmt(share,2)} & {fmt(pnl,3)} & {fmt(vol,6)} & {fmt(spr,3)} \\\\"
        )
        count += 1
        if count >= max_rows:
            break
    footer = (
        "\n\\hline\n\\end{tabular}\n"
        "\\caption{Multi-metric Pareto set (top entries) for M4: compute capacity (Cap), refill, optimizer share, and means of profit, realized volatility, and spread across seeds.}\\label{tab:pareto_m4}\n"
        "\\end{table}\n"
    )
    lines.append(footer)
    return "\n".join(lines)


def main():
    ap = argparse.ArgumentParser(description="Export M4 Pareto CSV to a LaTeX table")
    ap.add_argument("--pareto_csv", required=True)
    ap.add_argument("--out_tex", required=True)
    ap.add_argument("--max_rows", type=int, default=10)
    args = ap.parse_args()

    rows = load_rows(args.pareto_csv)
    tex = make_table(rows, args.max_rows)
    os.makedirs(os.path.dirname(args.out_tex), exist_ok=True)
    with open(args.out_tex, "w") as f:
        f.write(tex)
    print(f"Wrote LaTeX table to {args.out_tex}")


if __name__ == "__main__":
    main()

